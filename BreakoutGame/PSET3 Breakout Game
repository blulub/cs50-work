//
// breakout.c
//
// Computer Science 50
// Problem Set 3
//

// standard libraries
#define _XOPEN_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

// Stanford Portable Library
#include <spl/gevents.h>
#include <spl/gobjects.h>
#include <spl/gwindow.h>

// height and width of game's window in pixels
#define HEIGHT 600
#define WIDTH 400

// number of rows of bricks
#define ROWS 5

// number of columns of bricks
#define COLS 10

// radius of ball in pixels
#define RADIUS 10

// lives
#define LIVES 3

#define PADDLEHEIGHT 10
#define PADDLEWIDTH 50

// prototypes
void initBricks(GWindow window);
GOval initBall(GWindow window);
GRect initPaddle(GWindow window);
GLabel initScoreboard(GWindow window);
void updateScoreboard(GWindow window, GLabel label, int points);
GObject detectCollision(GWindow window, GOval ball);

int main(void)
{
    // seed pseudorandom number generator
    srand48(time(NULL));

    // instantiate window
    GWindow window = newGWindow(WIDTH, HEIGHT);

    // instantiate bricks
    initBricks(window);

    // instantiate ball, centered in middle of window
    GOval ball = initBall(window);

    // instantiate paddle, centered at bottom of window
    GRect paddle = initPaddle(window);

    // instantiate scoreboard, centered in middle of window, just above ball
    GLabel label = initScoreboard(window);

    // number of bricks initially
    int bricks = COLS * ROWS;

    // number of lives initially
    int lives = LIVES;

    // number of points initially
    int points = 0;
    
    // speed of ball and direction
    double xvelocity = drand48();
    double yvelocity = 4;
    
    // wait to start
    waitForClick();
    
    // keep playing until game over
    while (lives > 0 && bricks > 0)
    {
    // putup a scoreboard
    updateScoreboard(window, label, points);
    
    // listen for an event
    GEvent event = getNextEvent(MOUSE_EVENT);
    
    // move the ball according to velocities, pause(10) to make animation smoother
    move(ball, xvelocity, yvelocity);
    pause(10);
    // if we heard an event
    if (event != NULL)
    {
        // if the event was movement
        if (getEventType(event) == MOUSE_MOVED)
        {
            // make paddle follow cursor only in x direction
            double x = getX(event) - (getWidth(paddle) / 2);
            double y = 550;
            setLocation(paddle, x, y);
        }
    }
    // detect any collisions
    GObject object = detectCollision(window, ball);
    // if there is a collision, check if it's paddle or brick
    if (object != NULL)
    {
        if (object == paddle)
        {
            // bounce off paddle
            yvelocity = -yvelocity;
        }
        else if (strcmp(getType(object), "GRect") == 0)
        {
            // remove brick, add a point, and subtract one from brick counter
            yvelocity = -yvelocity;
            removeGWindow(window, object);
            bricks -= 1;
            points += 1;
        }
    }
    
    // bounce off right edge of window
    if (getX(ball) + getWidth(ball) >= getWidth(window))
    {
        xvelocity = -xvelocity;
    }
    // bounce off left edge of window
    if (getX(ball) <= 0)
    {
        xvelocity = -xvelocity;
    }
    // bounce off top of window
    if ((getY(ball) <= 0)) 
    {
        yvelocity = -yvelocity;
    }
    // lose a life if ball reaches bottom of window
    if (getY(ball) + getHeight(ball) >= getHeight(window))
    {
        lives -= 1;
        //reset position of ball and paddle
        setLocation(ball, (WIDTH/2) - (20/2), (HEIGHT/2) - (20/2));
        setLocation(paddle, (WIDTH / 2) + (PADDLEWIDTH/2), 550);
        waitForClick();
                
    }
          
        
    }

    // wait for click before exiting
    waitForClick();

    // game over
    closeGWindow(window);
    return 0;
}

/**
 * Initializes window with a grid of bricks.
 */
void initBricks(GWindow window)
{
    // initial x starting posn
    int xposn = 2;
    // initial y starting posn
    int yposn = 5;
    for (int y = 0; y < ROWS; y++)
    {
        for (int x = 0; x < COLS; x++)
        {
            GRect brick = newGRect(xposn, yposn, 36, 10);
            setColor(brick, "RED");
            setFilled(brick, true);
            add(window, brick);
            // increment xposn to leave a gap between bricks
            xposn += 40;
        }
    // reset xposn for each row 
    xposn = 2;
    // increment ypos to leave vertical gaps
    yposn += 20;
    }
    
}

/**
 * Instantiates ball in center of window.  Returns ball.
 */
GOval initBall(GWindow window)
{
    int ballheight = 20;
    int ballwidth = 20;
    GOval oval = newGOval((WIDTH/2) - (ballwidth/2), (HEIGHT/2) - (ballheight/2), ballwidth, ballheight);
    setFilled(oval, true);
    setColor(oval, "BLACK");
    add(window, oval);
    return oval;
}

/**
 * Instantiates paddle in bottom-middle of window.
 */
GRect initPaddle(GWindow window)
{
    GRect rect = newGRect((WIDTH / 2) + (PADDLEWIDTH/2), 550, PADDLEWIDTH, PADDLEHEIGHT);
    setFilled(rect, true);
    setColor(rect, "BLACK");
    add(window, rect);
    return rect;
}

/**
 * Instantiates, configures, and returns label for scoreboard.
 */
GLabel initScoreboard(GWindow window)
{
    GLabel label = newGLabel("");
    setFont(label, "SansSerif-36");
    add(window, label);
    
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
    return label;
}

/**
 * Updates scoreboard's label, keeping it centered in window.
 */
void updateScoreboard(GWindow window, GLabel label, int points)
{
    // update label
    char s[12];
    sprintf(s, "%i", points);
    setLabel(label, s);

    // center label in window
    double x = (getWidth(window) - getWidth(label)) / 2;
    double y = (getHeight(window) - getHeight(label)) / 2;
    setLocation(label, x, y);
}

/**
 * Detects whether ball has collided with some object in window
 * by checking the four corners of its bounding box (which are
 * outside the ball's GOval, and so the ball can't collide with
 * itself).  Returns object if so, else NULL.
 */
GObject detectCollision(GWindow window, GOval ball)
{
    // ball's location
    double x = getX(ball);
    double y = getY(ball);

    // for checking for collisions
    GObject object;

    // check for collision at ball's top-left corner
    object = getGObjectAt(window, x, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's top-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-left corner
    object = getGObjectAt(window, x, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // check for collision at ball's bottom-right corner
    object = getGObjectAt(window, x + 2 * RADIUS, y + 2 * RADIUS);
    if (object != NULL)
    {
        return object;
    }

    // no collision
    return NULL;
}
